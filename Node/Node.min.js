import Assert from"../Assert/Assert.min.js";export default class Node{constructor(t){Assert.assert("object"==typeof t,"@param Options must be a object type");if(t={...{type:"div",text:null,innerHTML:null,style:null,src:null,href:null,draggable:!1,drag:null,dragClose:null,nameSpace:null,id:null,class:null,attributes:null},...t},this.options=t,Assert.assert("string"==typeof t.type,"@param Options.type must be a string type. Instead it is a "+(t.type&&t.type.__proto__.constructor.name||"null")),t.nameSpace?this.DOMobject=document.createElementNS(t.nameSpace,t.type):this.DOMobject=document.createElement(t.type),t.id&&this.DOMobject.setAttribute("id",t.id),t.class&&(this.DOMobject.className=t.class),t.text){Assert.assert("String"===t.text.__proto__.constructor.name,"@param Options.text must be of String type. Instead it was a "+t.text.__proto__.constructor.name);var e=document.createTextNode(t.text);this.DOMobject.appendChild(e)}if(t.innerHTML&&(Assert.assert("String"===t.innerHTML.__proto__.constructor.name,"@param Options.innerHTML must be of String type.  Instead it was a "+t.innerHTML.__proto__.constructor.name),this.DOMobject.innerHTML=t.innerHTML),t.style&&this.setStyle(t.style),this.children=[],this.parent=null,t.src&&"img"===t.type&&(Assert.assert("String"===t.src.__proto__.constructor.name,"@param Options.src must be of String type. Instead it was a "+t.src.__proto__.constructor.name),this.DOMobject.src=t.src),t.href&&"a"===t.type&&(Assert.assert("String"===t.href.__proto__.constructor.name,"@param Options.href must be of String type. Instead it was a "+t.href.__proto__.constructor.name),this.DOMobject.href=t.href),t.draggable&&!0===t.draggable&&this.setupDrag(),t.attributes){let e=Object.keys(t.attributes);for(var n=0;n<e.length;n++){var r=e[n];this.DOMobject.setAttribute(r,t.attributes[r])}}this.animation=null}addChildren(...t){for(var e=0;e<t.length;e++){var n=t[e];Assert.assert("Node"===n.__proto__.constructor.name,"@param otherNode must be of node type. Instead you tried adding a "+n.__proto__.constructor.name),this.children.includes(n)||(this.children.push(n),n.parent=this,this.DOMobject.appendChild(n.DOMobject))}return this}removeChildren(...t){for(var e=0;e<t.length;e++){var n=t[e];Assert.assert(n&&"Node"===n.__proto__.constructor.name,"@param node must be of node type. Instead you tried removing a "+(n&&n.__proto__.constructor.name||null)),Assert.assert(this.children.includes(n),"Cannot remove child as the given node isn't a child of this node"),this.children.splice(this.children.indexOf(n),1),this.DOMobject.removeChild(n.DOMobject),n.parent=null}return this}removeAllChildren(){if(0!=this.children.length)return this.removeChildren(...this.children),this}addEventListener(t,e){this.DOMobject.addEventListener(t,e)}dispose(){if(this.parent){if(this.removeAllChildren(),this.parent==document.getElementsByTagName("body")[0])return this.parent.removeChildren(this.DOMobject),void(this.parent=null);this.parent.removeChildren(this),this.parent=null}}get parentDOM(){return this.DOMobject.parentElement}get parentNode(){return this.parent}get id(){return this.DOMobject.id}get class(){return this.DOMobject.className}setStyle(t){if(!t)return;let e=Object.keys(t);for(var n=0;n<e.length;n++)this.DOMobject.style[e[n]]=t[e[n]]}setupDrag(){let t=this.DOMobject,e=this.options;var n=0,r=0,s=0,o=0;function i(i){(i=i||window.event).preventDefault(),n=s-i.clientX,r=o-i.clientY,s=i.clientX,o=i.clientY,t.style.top=t.offsetTop-r+"px",t.style.left=t.offsetLeft-n+"px",c(e.drag)}function a(){document.onmouseup=null,document.onmousemove=null,c(e.dragClose)}function c(t){t&&(Assert.assert("function"==typeof t,"@param drag functions must be a function"),t())}t.onmousedown=function(t){(t=t||window.event).preventDefault(),s=t.clientX,o=t.clientY,document.onmouseup=a,document.onmousemove=i}}resetAnimation(){this.animation&&(this.animation.pause(),this.animation.cancel())}get onScreen(){var t=this.DOMobject.getBoundingClientRect(),e=Math.max(document.documentElement.clientHeight,window.innerHeight);return!(t.bottom<0||t.top-e>=0)}};