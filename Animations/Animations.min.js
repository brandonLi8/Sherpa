import Assert from"../Assert/Assert.min.js";export default class Animations{consructor(){}static animate(t){Assert.assert("object"==typeof t,"@param Options must be a object type");let a=t.node;Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null));let n=a.DOMobject.animate(t.animation,t.timing);return a.animation=n,n}static move(t){let a=(t={...{node:null,duration:200,deltaY:"5px",deltaX:"5px",fill:"forwards",timingOptions:{}},...t}).node;return Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null)),this.animate({node:a,animation:[{transform:"translate( 0 )"},{transform:"translate("+t.deltaX+","+t.deltaY+")"}],timing:{fill:t.fill,duration:t.duration,...t.timingOptions}})}static jiggle(t){let a=(t={...{node:null,duration:200,deltaY:"5px",deltaX:"5px",fill:"forwards",timingOptions:{}},...t}).node;return Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null)),this.animate({node:a,animation:[{transform:"translate(calc("+t.deltaX+" * -0.6 ),calc("+t.deltaY+" * -0.6 ))"},{transform:"translate(calc("+t.deltaX+" * 1 ),calc("+t.deltaY+" * 1 ))"},{transform:"translate(calc("+t.deltaX+" * -1 ),calc("+t.deltaY+" * -1 ))"},{transform:"translate(calc("+t.deltaX+" * 0.6 ),calc("+t.deltaY+" * 0.6 ))"}],timing:{fill:t.fill,duration:t.duration,...t.timingOptions}})}static enlarge(t){let a=(t={...{node:null,duration:200,resize:120,fill:"forwards",timingOptions:{}},...t}).node;return Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null)),this.animate({node:a,animation:[{transform:"translate( 0 )"},{transform:"scale("+t.resize/100+","+t.resize/100+")"}],timing:{fill:t.fill,duration:t.duration,...t.timingOptions}})}static iconHover(t){let a=(t={...{node:null,duration:200,amount:"25px",fill:"forwards",timingOptions:{}},...t}).node;Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null));let n=a.DOMobject.style.padding||"0px",o=a.DOMobject.style.margin||"0px",e=t.amount,r=[{transform:"rotate( 0deg )",offset:0,padding:n,margin:n},{transform:"rotate( 360deg )",offset:.35,padding:"calc( "+n+" + "+e+" / 2 )",margin:"calc( ("+o+" - "+e+" / 2 ) )"},{transform:"rotate( 360deg )",transform:"translateX( 1px )",padding:"calc( "+n+" + "+e+"  )",margin:"calc( ("+o+" - "+e+"  ) )",offset:.42},{transform:"scale( 1.13 )",transform:"translateX( -1px )",transform:"rotate( 360deg )",padding:"calc( "+n+" + "+e+"  )",margin:"calc( ("+o+" - "+e+"  ) )",offset:.6},{transform:"scale( 1.2 )",transform:"translateX( 0px )",transform:"rotate( 360deg )",padding:"calc( "+n+" + "+e+" / 5 )",margin:"calc( ("+o+" - ("+e+" / 5 ) ) )",offset:1}];return this.animate({node:a,animation:r,timing:{fill:t.fill,duration:t.duration,...t.timingOptions}})}static fade(t){let a=(t={...{node:null,duration:200,opacity:"0.5",fill:"forwards",timingOptions:{}},...t}).node;return Assert.assert(a&&"Node"===a.__proto__.constructor.name,"@param options.node must be of node type and is required. Instead it was a "+(a&&a.__proto__.constructor.name||null)),this.animate({node:a,animation:[{opacity:a.DOMobject.style.opacity||"1.0"},{opacity:t.opacity}],timing:{fill:t.fill,duration:t.duration,...t.timingOptions}})}};